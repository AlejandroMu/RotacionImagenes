/*
 * Generated by: org.ow2.frascati.tinfi.opt.oo.InterceptorClassGenerator
 * on: Sat Jun 01 16:55:55 COT 2019
 */

package edu.icesi.interfaces;


public class IMultiplicationVectorsInterceptorSCAIntent
extends org.ow2.frascati.tinfi.TinfiComponentInterceptor<edu.icesi.interfaces.IMultiplicationVectors>
implements org.objectweb.fractal.julia.Interceptor,edu.icesi.interfaces.IMultiplicationVectors {

  private static java.lang.reflect.Method[] METHODS;
  public IMultiplicationVectorsInterceptorSCAIntent()  {
  }

  private IMultiplicationVectorsInterceptorSCAIntent(Object obj)  {
    setFcItfDelegate(obj);
  }

  public void initFcController(org.objectweb.fractal.julia.InitializationContext ic) throws org.objectweb.fractal.api.factory.InstantiationException  {
    super.initFcController(ic);
    initIntentHandlersMap(METHODS);
  }

  public Object clone()  {
    IMultiplicationVectorsInterceptorSCAIntent clone = new IMultiplicationVectorsInterceptorSCAIntent(getFcItfDelegate());
    initFcClone(clone);
    clone.initIntentHandlersMap(METHODS);
    return clone;
  }

  public double multipication(final double[] arg0,final double[] arg1)  {
    java.util.List<org.ow2.frascati.tinfi.api.IntentHandler> handlers = intentHandlersMap.get(METHODS[0]);
    try {
      if( handlers.size() == 0 ) {
        double ret = impl.multipication(arg0,arg1);
        return ret;
      }
      else {
        org.objectweb.fractal.api.Component comp = getFcComponent();
        org.objectweb.fractal.api.Interface itf = getFcItf();
        org.ow2.frascati.tinfi.IntentJoinPointImpl<edu.icesi.interfaces.IMultiplicationVectors> ijp = new org.ow2.frascati.tinfi.IntentJoinPointImpl();
        ijp.init(handlers,comp,itf,impl,METHODS[0],(Object)arg0,(Object)arg1);
    Object proceed = ijp.proceed();
    double ret = (proceed==null) ? 0.0 : (java.lang.Double)proceed;
    return ret;
      }
    }
    catch( Throwable t ) {
      if( t instanceof RuntimeException ) {
        throw (RuntimeException) t;
      }
      throw new org.ow2.frascati.tinfi.TinfiRuntimeException(t);
    }
  }

  static  {
    try {
      METHODS = new java.lang.reflect.Method[]{
        edu.icesi.interfaces.IMultiplicationVectors.class.getMethod("multipication",double[].class,double[].class),
      };
    }
    catch( NoSuchMethodException e ) {
      throw new org.ow2.frascati.tinfi.TinfiRuntimeException(e);
    }
  }

}
